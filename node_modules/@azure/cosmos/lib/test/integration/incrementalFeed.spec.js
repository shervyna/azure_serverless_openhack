"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const TestHelpers_1 = require("../common/TestHelpers");
describe("NodeJS Incremental Feed Tests using 'a_im' and 'IfNoneMatch' options", function () {
    // delete all databases and create sample database
    before(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield TestHelpers_1.removeAllDatabases();
        });
    });
    describe("Newly updated documents should be fetched incremetally", function () {
        let container;
        // create container and two documents
        before(function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                container = yield TestHelpers_1.getTestContainer("Newly updated documents should be fetched incrementally");
                yield container.items.create({ id: "doc1" });
                yield container.items.create({ id: "doc2" });
            });
        });
        after(function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield container.delete();
            });
        });
        it("should fetch updated documents only", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                let options = { a_im: "Incremental feed" };
                const query = container.items.readAll(options);
                const { result: document, headers } = yield query.current();
                assert_1.default(headers.etag, "listDocuments response should have etag header");
                const { result: results } = yield query.toArray();
                assert_1.default.equal(results.length, 2, "initial number of documents should be equal 2");
                document.name = "xyz";
                const { body: replaced } = yield container.item(document.id).replace(document);
                assert_1.default.deepEqual(replaced.name, "xyz", "replaced document should be valid");
                options = {
                    a_im: "Incremental feed",
                    accessCondition: {
                        type: "IfNoneMatch",
                        condition: headers.etag
                    }
                };
                const { result: docs } = yield container.items.readAll(options).toArray();
                assert_1.default.equal(docs.length, 1, "initial number of documents should be equal 1");
                assert_1.default.equal(docs[0].name, "xyz", "fetched document should have 'name: xyz'");
                assert_1.default.equal(docs[0].id, document.id, "fetched document should be valid");
            });
        });
    });
    describe("Newly created documents should be fetched incrementally", function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let container;
            // create container and one document
            before(function () {
                return tslib_1.__awaiter(this, void 0, void 0, function* () {
                    container = yield TestHelpers_1.getTestContainer("Newly updated documents should be fetched incrementally");
                    yield container.items.create({ id: "doc1" });
                });
            });
            after(function () {
                return tslib_1.__awaiter(this, void 0, void 0, function* () {
                    yield container.delete();
                });
            });
            it("should fetch new documents only", function () {
                return tslib_1.__awaiter(this, void 0, void 0, function* () {
                    let options = { a_im: "Incremental feed" };
                    let query = container.items.readAll(options);
                    let { result, headers } = yield query.current();
                    assert_1.default(headers.etag, "listDocuments response should have etag header");
                    const { body: document } = yield container.items.create({
                        id: "doc2",
                        prop: 1
                    });
                    options = {
                        a_im: "Incremental feed",
                        accessCondition: {
                            type: "IfNoneMatch",
                            condition: headers.etag
                        }
                    };
                    query = yield container.items.readAll(options);
                    ({ result, headers } = yield query.current());
                    assert_1.default.notDeepEqual(result, document, "actual should not match with expected value.");
                    delete result._lsn;
                    assert_1.default.deepEqual(result, document, "actual value doesn't match with expected value.");
                    options.accessCondition.condition = headers.etag;
                    const { result: results } = yield container.items.readAll(options).toArray();
                    assert_1.default.equal(results.length, 0, "should be nothing new");
                    yield container.items.create({ id: "doc3" });
                    yield container.items.create({ id: "doc4" });
                    const { result: docs } = yield container.items.readAll(options).toArray();
                    assert_1.default.equal(docs.length, 2, "there should be 2 results");
                });
            });
        });
    });
});
//# sourceMappingURL=incrementalFeed.spec.js.map